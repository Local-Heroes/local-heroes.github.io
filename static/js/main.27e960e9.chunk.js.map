{"version":3,"sources":["components/GeoMap/GeoMap.tsx","App.js","serviceWorker.js","index.js"],"names":["featureCollectionLayer","id","type","GeoMap","props","_useState","useState","_useState2","Object","slicedToArray","source","setSource","_useState3","_useState4","setHoverInfo","useEffect","fetch","dataURL","then","response","json","layers","useMemo","fc","tuple","bbox","viewport","WebMercatorViewport","width","height","fitBounds","padding","longitude","latitude","zoom","getInitialBounds","_React$useState","React","_React$useState2","setViewport","useCallback","event","features","_event$point","point","x","y","hoveredFeature","feature","react_default","a","createElement","esm","assign","onViewportChange","interactiveLayerIds","mapboxApiAccessToken","data","paint","fill-outline-color","fill-color","fill-opacity","style","position","left","top","showCompass","App","GeoMap_GeoMap","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mQAQMA,EAAyB,CAC9BC,GAAI,KACJC,KAAM,QAgGMC,EAAS,SAACC,GAAuB,IAAAC,EACdC,mBAAS,MAAKC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAnCK,EAAMH,EAAA,GAAEI,EAASJ,EAAA,GAAAK,EACUN,mBAAS,MAAKO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAA9BE,GAAFD,EAAA,GAAcA,EAAA,IAE9BE,oBAAU,WACNC,MAAMZ,EAAMa,SACXC,KAAK,SAACC,GAAQ,OAAKA,EAASC,SAC5BF,KAAK,SAACE,GACHT,EAAUS,EAAKC,OAAO,GAAGX,WAE5B,IAEWY,kBAAQ,WACjB,OAAOZ,GACR,CAACA,IAEYA,GAhCE,SAACa,GACzB,IAAMC,EAAQC,eAAKF,GACbG,EAAW,IAAIC,IAAoB,CACxCC,MAAO,IACPC,OAAQ,MACNC,UACF,CACC,CAACN,EAAM,GAAIA,EAAM,IACjB,CAACA,EAAM,GAAIA,EAAM,KAElB,CAAEO,QAAS,KAE0BL,EAA9BM,UAA8BN,EAAnBO,SAAmBP,EAATQ,KAoBGC,CAAiBzB,GAJ3C,IAImD0B,EAClBC,IAAM/B,SAAS,CAC3CsB,MAAO,IACPC,OAAQ,MACVS,EAAA9B,OAAAC,EAAA,EAAAD,CAAA4B,EAAA,GAHKV,EAAQY,EAAA,GAAEC,EAAWD,EAAA,GAKZE,sBAAY,SAACC,GAA0D,IAEjFC,EAEED,EAFFC,SAAQC,EAENF,EADFG,MAAQC,EAACF,EAADE,EAAGC,EAACH,EAADG,EAEPC,EAAiBL,GAAYA,EAAS,GAG5C5B,EAAaiC,GAAkB,CAACC,QAASD,EAAgBF,IAAGC,OAC3D,IAIT,OACIG,EAAAC,EAAAC,cAAA,WACKzC,GACAuC,EAAAC,EAAAC,cAACC,EAAA,EAAU5C,OAAA6C,OAAA,GACJ3B,EAAQ,CACZ4B,iBAAkB,SAAC5B,GACfa,EAAYb,IAEhB6B,oBAAqB,CAAC,MACtBC,qBAAqB,kGAEjBP,EAAAC,EAAAC,cAACC,EAAA,EAAM,CAAClD,KAAK,UAAUuD,KAAM/C,GACzBuC,EAAAC,EAAAC,cAACC,EAAA,EAAK5C,OAAA6C,OAAA,GACFrD,EAAsB,CAC1B0D,MACI,CACIC,qBAAsB,QACtBC,aAAc,MACdC,eAAgB,QAK5BZ,EAAAC,EAAAC,cAAA,OAAKW,MAAO,CAACC,SAAU,WAAYC,KAAK,OAAQC,IAAI,OAChDhB,EAAAC,EAAAC,cAACC,EAAA,EAAiB,CAACc,aAAa,cCjKzC,SAASC,IAEtB,OACClB,EAAAC,EAAAC,cAAA,WACDF,EAAAC,EAAAC,cAACiB,EAAM,CAACnD,QAAS,kGACjBgC,EAAAC,EAAAC,cAACiB,EAAM,CAACnD,QAAS,8FCGCoD,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OAAO1B,EAAAC,EAAAC,cAACgB,EAAG,MAAKS,SAASC,eAAe,SD2HzC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9D,KAAK,SAAA+D,GACjCA,EAAaC","file":"static/js/main.27e960e9.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from \"react\";\nimport ReactMapGL, { Layer, NavigationControl, Source } from \"react-map-gl\";\nimport { bbox, Geometry, Point } from '@turf/turf';\nimport { normalizeViewportProps, ViewportProps, WebMercatorViewport } from 'viewport-mercator-project';\nimport playgroundMap from '../../data/playground.json';\nimport { responsiveProperty } from \"@mui/material/styles/cssUtils\";\nimport { GeoJSONFeature } from \"maplibre-gl\";\n\nconst featureCollectionLayer = {\n\tid: 'fc',\n\ttype: 'fill',\n};\n\n\ninterface MapDataType {\n\tcenter: number[],\n\tzoom: number,\n} \n\ninterface MarkersType {\n\tcenter: number[],\n\tname: string\n}\n\ninterface MasterDataType {\n    name: string,\n    version: number,\n    mapData: MapDataType,\n    markers: MarkersType,\n    layers: LayerType[]\n}\n\nexport interface LayerType{\n\tid: number,\n\tmapId: number,\n\torder: number,\n\tdataSourceId: number, \n\tcreatedAt: string,\n\tupdatedAt: string,\n\tdataSource: DataSourceType,\n\tsource: SourceType\n}\n\ninterface DataSourceType {\n\tid: number,\n\tname: string,\n\tsource: string,\n\tsourceAttribution: null,\n\torganizationId: number,\n\tcreatedAt: string,\n\tupdatedAt: string,\n}\n\ninterface SourceType {\n\ttype: string,\n\tfeatures: FeaturesType[],\n\tcoordinateSystem: CoordinateSystemType,\n\tbbox: number[]\n}\n\ninterface CoordinateSystemType {\n\ttype: string,\n\tstepSize: number\n}\n\ninterface FeaturesType {\n\ttype: string,\n\tproperties: PropertiesType,\n\tgeometry: GeometryType\n}\n\ninterface PropertiesType{\n\tname:string,\n\tlooping_sound?: string | null,\n\tshort_sound: string,\n\tintro_sound?: string | null,\n\tdescription?: string,\n\ttype: string,\n\t_layerId: number,\n}\n\ninterface GeometryType {\n    type: string,\n\tcoordinates: number[],\n}\n\nexport type GeoMapProps = {\n    dataURL: string;\n}\n\nconst getInitialBounds = (fc: SourceType) => {\n\tconst tuple = bbox(fc);\n\tconst viewport = new WebMercatorViewport({\n\t\twidth: 800,\n\t\theight: 600,\n\t}).fitBounds(\n\t\t[\n\t\t\t[tuple[0], tuple[1]],\n\t\t\t[tuple[2], tuple[3]],\n\t\t],\n\t\t{ padding: 12 }\n\t);\n\tconst { longitude, latitude, zoom } = viewport;\n\treturn { longitude, latitude, zoom };\n};\n\nexport const GeoMap = (props: GeoMapProps) => {\n    const [source, setSource] = useState(null);\n    const [hoverInfo, setHoverInfo] = useState(null)\n\n    useEffect(() => {\n        fetch(props.dataURL)\n        .then((response) => response.json())\n        .then((json) => {\n            setSource(json.layers[0].source)\n        })\n      }, []);\n\n       const data = useMemo(() => {\n           return source\n       }, [source]);\n\n        const bounds = source && getInitialBounds(source);\n        const [viewport, setViewport] = React.useState({\n            width: 800,\n            height: 600,\n        });\n\n        const onHover = useCallback((event: { features: any; point: { x: any; y: any; }; }) => {\n            const {\n              features,\n              point: {x, y}\n            } = event;\n            const hoveredFeature = features && features[0];\n        \n            // prettier-ignore\n            setHoverInfo(hoveredFeature && {feature: hoveredFeature, x, y});\n          }, []);\n      \n\n    \n    return (\n        <div>\n            {source && \n             <ReactMapGL\n                {...viewport}\n                onViewportChange={(viewport) => {\n                    setViewport(viewport as ViewportProps)\n                    }}\n                interactiveLayerIds={['fc']}\n                mapboxApiAccessToken=\"pk.eyJ1IjoicHVydmFzaW5naCIsImEiOiJjbDQ4amRrYjQwc3RwM2NsbGttbnlpaTRmIn0.djnJ9PjVpJ7g8aIWHHnPGA\"\n                >\n                    <Source type=\"geojson\" data={source}>\n                        <Layer \n                        {...featureCollectionLayer}\n                        paint={\n                            {\n                                \"fill-outline-color\": \"white\",\n                                \"fill-color\": \"red\",\n                                \"fill-opacity\": 0.5\n                            }\n                        }\n                        />\n                    </Source>\n                    <div style={{position: 'absolute', left:'15px', top:\"5%\"}}>\n                        <NavigationControl showCompass={false}/>\n                    </div>\n             </ReactMapGL>\n            }\n       \n        </div>\n      );\n}\n\n","import React, { useRef, useEffect } from \"react\";\nimport { GeoMap } from \"./components/GeoMap/GeoMap\";\nimport playgroundMap from './data/playground.json'\n\nexport default function App() {\n  \n  return (\n\t  <div>\n\t\t<GeoMap dataURL={\"https://raw.githubusercontent.com/purvasingh96/Mapbox-react-app/main/src/data/playground.json\"}/>\n\t\t<GeoMap dataURL={\"https://raw.githubusercontent.com/purvasingh96/Mapbox-react-app/main/src/data/COVID.json\"}/>\n\t</div>\n  );\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}